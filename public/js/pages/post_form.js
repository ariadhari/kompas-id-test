/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pages/post_form.js":
/*!*****************************************!*\
  !*** ./resources/js/pages/post_form.js ***!
  \*****************************************/
/***/ (() => {

eval("var textEditorContent = {\n  //selector: \"#post_content\",\n  relative_urls: false,\n  // complete absolute path\n  remove_script_host: false,\n  // complete absolute path\n  theme: \"modern\",\n  width: \"90%\",\n  height: 320,\n  plugins: [\"advlist autolink link image lists charmap print preview hr anchor pagebreak\", \"searchreplace wordcount visualblocks visualchars insertdatetime media nonbreaking\", \"table contextmenu directionality emoticons paste textcolor responsivefilemanager code instagram twitter_url youtube customtable bacajuga quote\"],\n  toolbar1: \"undo redo | bold italic underline | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | blockquote removeformat styleselect | image\",\n  toolbar2: \"link unlink anchor | forecolor backcolor  | pastetext | preview code | fontsizeselect | youtube instagram twitter_url customtable bacajuga quote\",\n  paste_word_valid_elements: \"b,strong,i,em,h1,h2,h3,h4,u,p,ol,ul,li,a[href],table,tr,td,thead,tbody,tfooter,span,color,font-size,font-color,font-family,mark\",\n  invalid_styles: {\n    table: \"width height\",\n    tr: \"width height\",\n    th: \"width height\",\n    td: \"width height\"\n  },\n  valid_elements: \"+*[*]\",\n  default_link_target: \"_blank\",\n  extended_valid_elements: \"+iframe[width|height|name|align|class|frameborder|allowfullscreen|allow|src|*],\" + \"script[language|type|async|src|charset]\" + \"img[*]\" + \"embed[width|height|name|flashvars|src|bgcolor|align|play|loop|quality|allowscriptaccess|type|pluginspage]\" + \"blockquote[dir|style|cite|class|id|lang|onclick|ondblclick\" + \"|onkeydown|onkeypress|onkeyup|onmousedown|onmousemove|onmouseout\" + \"|onmouseover|onmouseup|title]\",\n  content_css: [\"//fonts.googleapis.com/css?family=Lato:300,300i,400,400i\", \"//www.tinymce.com/css/codepen.min.css\", \"/css/tinymce.custom.css\"],\n  image_advtab: true,\n  branding: false,\n  filemanager_crossdomain: false,\n  external_filemanager_path: \"/plugins/bisnis/filemanager/\",\n  filemanager_title: \"Responsive Filemanager\",\n  external_plugins: {\n    \"filemanager\": \"/plugins/bisnis/filemanager/plugin.min.js\"\n  }\n},\n    form = document.getElementById(\"form_post\");\nvar image_default = HOST_URL + '/media/default/image_default.jpg',\n    postContent = jQuery.extend({}, textEditorContent),\n    section_id = 0;\nwindow.choice = [], window.postId = [];\nwindow.choiceTag = [];\nwindow.multipleRules = [];\n\nvar FormValidation = function () {\n  var validator;\n\n  window._validate = function () {\n    $('#tag_id').select2({\n      placeholder: \"Select Topic\",\n      allowClear: true\n    }).on('change.select2', function () {\n      $('#tag_id').valid();\n    });\n    $('#category_id').select2({\n      placeholder: \"Select Category\",\n      allowClear: true\n    }).on('change.select2', function () {\n      $('#category_id').valid();\n    });\n    $('#post_author').select2({\n      placeholder: \"Select Author\",\n      allowClear: true\n    }).on('change.select2', function () {\n      $('#post_author').valid();\n    });\n    $('#post_editor').select2({\n      placeholder: \"Select Editor\",\n      allowClear: true\n    }).on('change.select2', function () {\n      $('#post_editor').valid();\n    });\n    $('#post_feature').select2({\n      allowClear: false\n    }).on('change.select2', function () {\n      $('#post_feature').valid();\n    });\n    $('#post_level').select2({\n      allowClear: false\n    }).on('change.select2', function () {\n      $('#post_level').valid();\n    });\n    $.validator.addMethod('filesize', function (value, element, param) {\n      param = param * 1024;\n      return this.optional(element) || element.files[0].size <= param;\n    }, 'File size must be less than {0} Kb');\n    $.validator.addMethod(\"notOnlyZero\", function (value, element, param) {\n      return this.optional(element) || parseInt(value) > 0;\n    }, 'Value must be greater  than 0 ');\n    $.each($.validator.methods, function (key, value) {\n      $.validator.methods[key] = function () {\n        if (arguments.length > 0) {\n          arguments[0] = $.trim(arguments[0]);\n        }\n\n        return value.apply(this, arguments);\n      };\n    });\n    $.validator.addMethod('dimension', function (value, element, param) {\n      if (element.files.length == 0) {\n        return true;\n      }\n\n      if ($('input[name=\"is_premium\"]:checked').val() == '1') {\n        param[0] = 1920;\n        param[1] = 500;\n      }\n\n      var width = $(element).data('imageWidth');\n      var height = $(element).data('imageHeight');\n\n      if (width >= param[0] && height >= param[1]) {\n        return true;\n      } else {\n        return false;\n      }\n    }, 'Please upload an image with {0} x {1} pixels dimension');\n    validator = $(\"#form_post\").validate({\n      ignore: null,\n      rules: {\n        post_date: {\n          required: true\n        },\n        post_title: {\n          required: true,\n          maxlength: 250,\n          remote: {\n            url: HOST_URL + '/ajax/posts/title',\n            type: \"post\",\n            data: {\n              _token: form.querySelector('[name=\"_token\"]').value,\n              state: form.querySelector('[name=\"state\"]').value,\n              id: form.querySelector('[name=\"post_id\"]').value\n            }\n          }\n        },\n        post_summary: {\n          required: true\n        },\n        post_keyword: {\n          required: true\n        },\n        post_is_longform: {\n          required: true\n        },\n        post_is_premium: {\n          required: true\n        },\n        post_live: {\n          required: true\n        },\n        post_kolom: {\n          required: true\n        },\n        post_content: {\n          required: true\n        },\n        post_image_caption: {\n          required: true\n        },\n        post_image_content: {\n          required: function required() {\n            if (form.querySelector('[name=\"state\"]').value == 'add' && $('#library_file').val() == \"\") {\n              return true;\n            }\n\n            return false;\n          },\n          accept: \"image/jpg,image/jpeg,image/png\",\n          dimension: [1000, 667],\n          filesize: 500\n        },\n        post_author: {\n          required: true\n        },\n        post_editor: {\n          required: true\n        },\n        'tag_id[]': {\n          required: true\n        },\n        library_image: {\n          required: function required() {\n            if ($('#library_file').val() == \"\" && $('#library_thumb').val() && $('#library_date').val()) {\n              return true;\n            }\n\n            return false;\n          }\n        },\n        category_id: {\n          required: true\n        },\n        post_source: {\n          required: true\n        },\n        post_nilai_reporter: {\n          required: true,\n          notOnlyZero: '0'\n        },\n        post_nilai_redaktur: {\n          required: true,\n          notOnlyZero: '0'\n        }\n      },\n      highlight: function highlight(element) {\n        $(element).closest('.form-control').addClass('is-invalid');\n      },\n      unhighlight: function unhighlight(element) {\n        $(element).closest(\".form-control\").removeClass(\"is-invalid\");\n      },\n      errorPlacement: function errorPlacement(error, element) {\n        error.addClass('fv-plugins-message-container');\n\n        if (element.parent('.input-group').length) {\n          error.insertAfter(element.parent()); // radio/checkbox?\n        } else if (element.hasClass('select2')) {\n          error.insertAfter(element.next('span')); // select2\n        } else if (element.attr(\"type\") == \"radio\") {\n          error.insertAfter(element.closest('div.radio-inline'));\n        } else if (element.attr(\"name\") == \"content\") {\n          error.insertAfter(\"div#cke_content\");\n        } else {\n          error.insertAfter(element); // default\n        }\n      },\n      errorElement: \"div\",\n      errorClass: 'fv-help-block',\n      messages: {},\n      wrapper: 'div'\n    });\n  };\n\n  return {\n    init: function init() {\n      _validate();\n    }\n  };\n}();\n\njQuery(function () {\n  FormValidation.init();\n  postContent.selector = \"#post_content\";\n  tinymce.init(postContent);\n  $(\"#add_section\").on('click', function (event) {\n    dynamicElement('add');\n  });\n  $('#post_title').on('keyup propertychange paste', function () {\n    count();\n  });\n  $('#post_summary').on('keyup propertychange paste', function () {\n    countSummary();\n  });\n  $('#post_date_datetimepicker').datetimepicker({\n    format: \"YYYY-MM-DD HH:mm:ss\",\n    useCurrent: true\n  });\n  $(\".fancybox\").fancybox({\n    width: '1062px',\n    height: 'auto',\n    autoDimensions: false,\n    type: 'iframe',\n    autoSize: false,\n    iframe: {\n      css: {\n        width: '1072px',\n        height: '100%'\n      }\n    },\n    clickSlide: false,\n    clickOutside: false\n  });\n  $('#post_image_content').on('change', function () {\n    $('#post_image_content').removeData('imageWidth');\n    $('#post_image_content').removeData('imageHeight');\n    var file = this.files[0];\n\n    if (file) {\n      var tmpImg = new Image();\n      tmpImg.src = window.URL.createObjectURL(file);\n\n      tmpImg.onload = function () {\n        width = tmpImg.naturalWidth, height = tmpImg.naturalHeight;\n        $('#post_image_content').data('imageWidth', width);\n        $('#post_image_content').data('imageHeight', height);\n        $('#libraryInfo div').empty();\n        $('#post_image_caption').val(null);\n      };\n    }\n  });\n  $('input[type=radio][name=post_is_premium]').change(function () {\n    $(\"#post_image_content\").val(null);\n    $('#view_image').attr('src', HOST_URL + '/media/default/image_default.jpg');\n    $('#post_image_content-error').remove();\n  });\n});\n\nwindow.addRules = function (rulesObj) {\n  rulesObj.forEach(function (value, i) {\n    for (var item in value) {\n      $('#' + item + i).rules('add', value[item]);\n    }\n  });\n};\n\nwindow.removeRules = function (rulesObj) {\n  rulesObj.forEach(function (value, i) {\n    for (var item in value) {\n      $('#' + item + i).rules('remove');\n    }\n  });\n};\n\nwindow.dynamicElement = function (data) {\n  var section_length = 1;\n\n  if (data != 'add') {\n    section_length = Object.keys(data).length;\n  }\n\n  var state = $('#state').val();\n\n  for (i = 1; i <= section_length; i++) {\n    var post_data = '';\n\n    if (data != 'add') {\n      post_data = data[i];\n    } else {\n      state = 'add';\n    }\n\n    section_id += 1;\n    $.ajax({\n      type: \"POST\",\n      url: HOST_URL + '/ajax/posts/addSection',\n      async: false,\n      cache: false,\n      data: {\n        section_id: section_id,\n        data: post_data,\n        state: state\n      },\n      success: function success(data) {\n        $(\"#section\").append(data);\n        postContent.selector = \"#content_\" + section_id;\n        tinymce.init(postContent);\n        window.multipleRules[section_id] = {\n          content_: {\n            required: true\n          }\n        };\n        removeRules(window.multipleRules);\n        addRules(window.multipleRules);\n      }\n    });\n  }\n};\n\nwindow.removeReadtoo = function (i) {\n  var count = 0,\n      title = $('#post_postin' + i + '_title').val(),\n      postin = $('.postin').val(null);\n  window.postId = [];\n  window.choice = $.grep(window.choice, function (e) {\n    return e.title != title;\n  });\n  $.each(window.choice, function (index, item) {\n    ++index;\n    count = index;\n    window.postId.push(item.id);\n    $('#post_postin' + index + '_title').val(item.title);\n    $('#post_postin' + index + '_url').val(item.url);\n  });\n  $('#read_too').val(count + ' article selected');\n};\n\nwindow.count = function () {\n  var txtVal = $('#post_title').val();\n  var words = txtVal.trim().replace(/\\s+/gi, ' ').split(' ').length;\n  var chars = txtVal.length;\n  var maxchars = 65;\n  var remains = maxchars - chars;\n  var text = 'remaining';\n\n  if (chars === 0) {\n    words = 0;\n  }\n\n  if (remains >= 0) {\n    $('#counter_title').css('color', 'gray');\n  } else {\n    $('#counter_title').css('color', 'red');\n    text = 'exceed';\n  }\n\n  $('#counter_title').html(remains + ' characters ' + text);\n};\n\nwindow.countSummary = function () {\n  var txtVal = $('#post_summary').val();\n  var words = txtVal.trim().replace(/\\s+/gi, ' ').split(' ').length;\n  var chars = txtVal.length;\n  var maxchars = 160;\n  var remains = maxchars - chars;\n  var text = 'remaining';\n\n  if (chars === 0) {\n    words = 0;\n  }\n\n  if (remains >= 0) {\n    $('#counter_summary').css('color', 'gray');\n  } else {\n    $('#counter_summary').css('color', 'red');\n    text = 'exceed';\n  }\n\n  $('#counter_summary').html(remains + ' characters ' + text);\n};\n\nwindow.tags = function () {\n  $('.fancybox').attr('href', HOST_URL + '/ajax/tag/iframe');\n};\n\nwindow.posts = function () {\n  $('.fancybox').attr('href', HOST_URL + '/ajax/posts/iframe');\n};\n\nwindow.imageLibrary = function () {\n  var lib = $('input[name=\"post_image_type\"]:checked').val() == 1 ? 'images' : 'infographics';\n  $('.fancybox').attr('href', HOST_URL + '/ajax/' + lib + '/iframe');\n};\n\nwindow.setTag = function () {\n  $('#tag_id').select2().empty();\n  $(\"#tag_id\").select2({\n    data: window.choiceTag,\n    tags: true,\n    width: \"90%\"\n  });\n};\n\nwindow.setImageContent = function (row) {\n  $('#libraryInfo div').empty();\n  $('<input>', {\n    type: 'hidden',\n    name: 'library_date',\n    value: row.date\n  }).appendTo('#libraryInfo');\n  $('<input>', {\n    type: 'hidden',\n    name: 'library_file',\n    value: row.file\n  }).appendTo('#libraryInfo');\n  $('<input>', {\n    type: 'hidden',\n    name: 'library_thumb',\n    value: row.thumb\n  }).appendTo('#libraryInfo');\n  $('#library_image').val(row.file);\n  $(\"#post_image_content\").val(null);\n  $('#post_image_caption').val(row.caption);\n  $('#view_image').attr('src', row.src).attr('onerror', \"this.onerror=null;this.src=\\'\" + image_default + \"\\'\");\n};\n\nwindow.removeSection = function (id, index, id_data, state) {\n  Swal.fire({\n    title: \"Are you sure?\",\n    text: \"You won't be able to revert this!\",\n    icon: \"warning\",\n    showCancelButton: true,\n    confirmButtonText: \"Yes, delete it!\"\n  }).then(function (result) {\n    if (result.value) {\n      if (state == 'add') {\n        window.multipleRules.splice(index, 1);\n        removeRules(window.multipleRules);\n        addRules(window.multipleRules);\n        var elem = document.getElementById(id);\n        elem.remove();\n        Swal.fire(\"Deleted!\", \"Data deleted successfully.\", \"success\");\n      } else {\n        $.ajax({\n          type: \"DELETE\",\n          url: HOST_URL + '/ajax/posts/removeSection/' + id_data,\n          cache: false,\n          data: {\n            _method: 'DELETE',\n            id: id_data\n          },\n          success: function success(data) {\n            if (data == true) {\n              window.multipleRules.splice(index, 1);\n              removeRules(window.multipleRules);\n              addRules(window.multipleRules);\n              var elem = document.getElementById(id);\n              elem.remove();\n              Swal.fire(\"Deleted!\", \"Data deleted successfully.\", \"success\");\n            } else {\n              Swal.fire(\"Deleted!\", \"Data failed to delete.\", \"error\");\n            }\n          },\n          error: function error(xhr, ajaxOptions, thrownError) {\n            Swal.fire(\"Deleted!\", \"Error : Data failed to delete.\", \"error\");\n          }\n        });\n      }\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pages/post_form.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/pages/post_form.js"]();
/******/ 	
/******/ })()
;
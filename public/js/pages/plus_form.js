/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pages/plus_form.js":
/*!*****************************************!*\
  !*** ./resources/js/pages/plus_form.js ***!
  \*****************************************/
/***/ (() => {

eval("var section_id = 0;\nwindow.multipleRules = [];\nvar validator;\n$(function () {\n  var ckeditor_content = CKEDITOR.replace('content', {\n    on: {\n      instanceReady: function instanceReady(ev) {\n        this.dataProcessor.writer.setRules('p', {\n          indent: false,\n          breakBeforeOpen: false,\n          breakAfterOpen: false,\n          breakBeforeClose: false,\n          breakAfterClose: false\n        });\n      }\n    },\n    enterMode: CKEDITOR.ENTER_P,\n    filebrowserBrowseUrl: 'plugins/plus/filemanager/dialog.php?type=2&editor=ckeditor&sort_by=date&fldr=',\n    filebrowserUploadUrl: 'plugins/plus/filemanager/dialog.php?type=2&editor=ckeditor&sort_by=date&fldr=',\n    filebrowserImageBrowseUrl: 'plugins/plus/filemanager/dialog.php?type=1&editor=ckeditor&sort_by=date&fldr='\n  });\n  $('#publish_date_datetimepicker').datetimepicker({\n    format: \"YYYY-MM-DD HH:mm:ss\",\n    useCurrent: true\n  });\n  $('#category_id').select2({\n    placeholder: \"Select Category\",\n    allowClear: true\n  }).on('change.select2', function () {\n    $('#category_id').valid();\n  });\n  $('#author_id').select2({\n    placeholder: \"Select Author\",\n    allowClear: true\n  }).on('change.select2', function () {\n    $('#author_id').valid();\n  });\n  $('#editor_id').select2({\n    placeholder: \"Select Editor\",\n    allowClear: true\n  }).on('change.select2', function () {\n    $('#editor_id').valid();\n  });\n  ckeditor_content.on('change', function () {\n    $('#content').valid();\n  });\n  $('#image').change(function () {\n    $('#image').removeData('imageWidth');\n    $('#image').removeData('imageHeight');\n    var file = this.files[0];\n    var tmpImg = new Image();\n    tmpImg.src = window.URL.createObjectURL(file);\n\n    tmpImg.onload = function () {\n      width = tmpImg.naturalWidth, height = tmpImg.naturalHeight;\n      $('#image').data('imageWidth', width);\n      $('#image').data('imageHeight', height);\n    };\n  });\n  $('#thumbnail').change(function () {\n    $('#thumbnail').removeData('imageWidth');\n    $('#thumbnail').removeData('imageHeight');\n    var file = this.files[0];\n    var tmpImg = new Image();\n    tmpImg.src = window.URL.createObjectURL(file);\n\n    tmpImg.onload = function () {\n      width = tmpImg.naturalWidth, height = tmpImg.naturalHeight;\n      $('#thumbnail').data('imageWidth', width);\n      $('#thumbnail').data('imageHeight', height);\n    };\n  });\n  $.validator.addMethod('filesize', function (value, element, param) {\n    param = param * 1024;\n    return this.optional(element) || element.files[0].size <= param;\n  }, 'File size must be less than {0} Kb');\n  $.validator.addMethod('dimension', function (value, element, param) {\n    if (element.files.length == 0) {\n      return true;\n    }\n\n    var width = $(element).data('imageWidth');\n    var height = $(element).data('imageHeight');\n\n    if (width == param[0] && height == param[1]) {\n      return true;\n    } else {\n      return false;\n    }\n  }, 'Please upload an image with {0} x {1} pixels dimension');\n  $.each($.validator.methods, function (key, value) {\n    $.validator.methods[key] = function () {\n      if (arguments.length > 0) {\n        arguments[0] = $.trim(arguments[0]);\n      }\n\n      return value.apply(this, arguments);\n    };\n  });\n  var form = document.getElementById(\"form_plus\");\n  validator = $(\"#form_plus\").validate({\n    ignore: null,\n    rules: {\n      title: {\n        required: true,\n        maxlength: 250,\n        remote: {\n          url: HOST_URL + '/ajax/pluses/title',\n          type: \"post\",\n          data: {\n            _token: form.querySelector('[name=\"_token\"]').value,\n            state: form.querySelector('[name=\"state\"]').value,\n            id: form.querySelector('[name=\"id\"]').value\n          }\n        }\n      },\n      category_id: \"required\",\n      publish_date: \"required\",\n      author_id: \"required\",\n      editor_id: \"required\",\n      image_caption: \"required\",\n      summary: \"required\",\n      keywords: \"required\",\n      is_publish: \"required\",\n      is_featured: \"required\",\n      image: {\n        required: function required() {\n          if (form.querySelector('[name=\"state\"]').value == 'add') {\n            return true;\n          }\n\n          return false;\n        },\n        accept: \"image/jpg,image/jpeg,image/png\",\n        dimension: [1920, 760],\n        filesize: 2048 // 2 Mb\n\n      },\n      thumbnail: {\n        required: function required() {\n          if (form.querySelector('[name=\"state\"]').value == 'add') {\n            return true;\n          }\n\n          return false;\n        },\n        accept: \"image/jpg,image/jpeg,image/png\",\n        dimension: [460, 345],\n        filesize: 2048 // 2 Mb\n\n      },\n      content: {\n        required: function required(textarea) {\n          // update textarea\n          CKEDITOR.instances[textarea.id].updateElement(); // strip tags\n\n          var editorcontent = textarea.value.replace(/<[^>]*>/gi, '');\n          return editorcontent.length === 0;\n        }\n      }\n    },\n    highlight: function highlight(element) {\n      $(element).closest('.form-control').addClass('is-invalid');\n    },\n    unhighlight: function unhighlight(element) {\n      $(element).closest(\".form-control\").removeClass(\"is-invalid\");\n    },\n    errorPlacement: function errorPlacement(error, element) {\n      error.addClass('fv-plugins-message-container');\n\n      if (element.parent('.input-group').length) {\n        error.insertAfter(element.parent()); // radio/checkbox?\n      } else if (element.hasClass('select2')) {\n        error.insertAfter(element.next('span')); // select2\n      } else if (element.attr(\"type\") == \"radio\") {\n        error.insertAfter(element.closest('div.radio-inline'));\n      } else if (element.attr(\"name\") == \"content\") {\n        error.insertAfter(\"div#cke_content\");\n      } else {\n        error.insertAfter(element); // default\n      }\n    },\n    errorElement: \"div\",\n    errorClass: 'fv-help-block',\n    messages: {\n      title: {\n        required: 'Title is required.',\n        remote: 'The title you entered is already registered.'\n      },\n      category_id: {\n        required: 'Category is required.'\n      },\n      publish_date: {\n        required: 'Publish Date is required.'\n      },\n      author_id: {\n        required: 'Author is required.'\n      },\n      editor_id: {\n        required: 'Editor is required.'\n      },\n      image_caption: {\n        required: 'Image Caption is required.'\n      },\n      summary: {\n        required: 'Summary is required.'\n      },\n      keywords: {\n        required: 'Keywords is required.'\n      },\n      is_publish: {\n        required: 'Publish status is required.'\n      },\n      image: {\n        required: 'Image is required.'\n      },\n      thumbnail: {\n        required: 'Thumbnail is required.'\n      },\n      content: {\n        required: 'Content is required.'\n      }\n    },\n    wrapper: 'div'\n  }); // add section\n\n  $(\"#add_section\").on('click', function (event) {\n    dynamicElement('add');\n  });\n});\n\nwindow.dynamicElement = function (data) {\n  var section_length = 1;\n\n  if (data != 'add') {\n    section_length = Object.keys(data).length;\n  }\n\n  var state = $('#state').val();\n\n  for (i = 1; i <= section_length; i++) {\n    var post_data = '';\n\n    if (data != 'add') {\n      post_data = data[i];\n    } else {\n      state = 'add';\n    }\n\n    section_id += 1;\n    $.ajax({\n      type: \"POST\",\n      url: HOST_URL + '/ajax/pluses/addSection',\n      async: false,\n      cache: false,\n      data: {\n        section_id: section_id,\n        data: post_data,\n        state: state\n      },\n      success: function success(data) {\n        $(\"#section\").append(data);\n        window[\"content_\" + section_id] = CKEDITOR.replace(\"content_\" + section_id, {\n          on: {\n            instanceReady: function instanceReady(ev) {\n              this.dataProcessor.writer.setRules('p', {\n                indent: false,\n                breakBeforeOpen: false,\n                breakAfterOpen: false,\n                breakBeforeClose: false,\n                breakAfterClose: false\n              });\n            }\n          },\n          enterMode: CKEDITOR.ENTER_P,\n          filebrowserBrowseUrl: 'plugins/plus/filemanager/dialog.php?type=2&editor=ckeditor&fldr=',\n          filebrowserUploadUrl: 'plugins/plus/filemanager/dialog.php?type=2&editor=ckeditor&fldr=',\n          filebrowserImageBrowseUrl: 'plugins/plus/filemanager/dialog.php?type=1&editor=ckeditor&fldr='\n        });\n        window.multipleRules[section_id] = {\n          title_: {\n            required: true\n          },\n          content_: {\n            required: function required(textarea) {\n              // update textarea\n              CKEDITOR.instances[textarea.id].updateElement(); // strip tags\n\n              var editorcontent = textarea.value.replace(/<[^>]*>/gi, '');\n              return editorcontent.length === 0;\n            }\n          }\n        };\n        removeRules(window.multipleRules);\n        addRules(window.multipleRules);\n      }\n    });\n  }\n};\n\nwindow.addRules = function (rulesObj) {\n  rulesObj.forEach(function (value, i) {\n    for (var item in value) {\n      $('#' + item + i).rules('add', value[item]);\n    }\n  });\n};\n\nwindow.removeRules = function (rulesObj) {\n  rulesObj.forEach(function (value, i) {\n    for (var item in value) {\n      $('#' + item + i).rules('remove');\n    }\n  });\n};\n\nwindow.removeSection = function (id, index, id_data, state) {\n  Swal.fire({\n    title: \"Are you sure?\",\n    text: \"You won't be able to revert this!\",\n    icon: \"warning\",\n    showCancelButton: true,\n    confirmButtonText: \"Yes, delete it!\"\n  }).then(function (result) {\n    if (result.value) {\n      if (state == 'add') {\n        window.multipleRules.splice(index, 1);\n        removeRules(window.multipleRules);\n        addRules(window.multipleRules);\n        var elem = document.getElementById(id);\n        elem.remove();\n        Swal.fire(\"Deleted!\", \"Data deleted successfully.\", \"success\");\n      } else {\n        //edit\n        $.ajax({\n          type: \"POST\",\n          url: HOST_URL + '/ajax/plus-sections/' + id_data,\n          cache: false,\n          data: {\n            _method: 'DELETE',\n            id: id_data\n          },\n          success: function success(data) {\n            if (data == true) {\n              window.multipleRules.splice(index, 1);\n              removeRules(window.multipleRules);\n              addRules(window.multipleRules);\n              var elem = document.getElementById(id);\n              elem.remove();\n              Swal.fire(\"Deleted!\", \"Data deleted successfully.\", \"success\");\n            } else {\n              Swal.fire(\"Deleted!\", \"Data failed to delete.\", \"error\");\n            }\n          },\n          error: function error(xhr, ajaxOptions, thrownError) {\n            Swal.fire(\"Deleted!\", \"Error : Data failed to delete.\", \"error\");\n          }\n        });\n      }\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pages/plus_form.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/pages/plus_form.js"]();
/******/ 	
/******/ })()
;
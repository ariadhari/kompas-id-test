/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pages/profile_form.js":
/*!********************************************!*\
  !*** ./resources/js/pages/profile_form.js ***!
  \********************************************/
/***/ (() => {

eval("window.multipleRules = [];\nvar validator;\n$(function () {\n  $('#image_profile').change(function () {\n    $('#image_profile').removeData('imageWidth');\n    $('#image_profile').removeData('imageHeight');\n    var file = this.files[0];\n    var tmpImg = new Image();\n    tmpImg.src = window.URL.createObjectURL(file);\n\n    tmpImg.onload = function () {\n      width = tmpImg.naturalWidth, height = tmpImg.naturalHeight;\n      $('#image_profile').data('imageWidth', width);\n      $('#image_profile').data('imageHeight', height);\n    };\n  });\n  $.validator.addMethod('filesize', function (value, element, param) {\n    param = param * 1024;\n    return this.optional(element) || element.files[0].size <= param;\n  }, 'Ukuran file harus kurang dari {0} Kb');\n  $.validator.addMethod('dimension', function (value, element, param) {\n    if (element.files.length == 0) {\n      return true;\n    }\n\n    var width = $(element).data('imageWidth');\n    var height = $(element).data('imageHeight');\n\n    if (width == param[0] && height == param[1]) {\n      return true;\n    } else {\n      return false;\n    }\n  }, 'Please upload an image with {0} x {1} pixels dimension');\n  $.each($.validator.methods, function (key, value) {\n    $.validator.methods[key] = function () {\n      if (arguments.length > 0) {\n        arguments[0] = $.trim(arguments[0]);\n      }\n\n      return value.apply(this, arguments);\n    };\n  });\n  var form = document.getElementById(\"form_profile\");\n  validator = $(\"#form_profile\").validate({\n    ignore: null,\n    onfocusout: function onfocusout(el) {\n      if (!this.checkable(el)) {\n        this.element(el);\n      }\n    },\n    rules: {\n      nama: {\n        required: true,\n        maxlength: 100\n      },\n      email: {\n        required: true,\n        maxlength: 250,\n        email: true,\n        remote: {\n          url: HOST_URL + '/ajax/user/validate',\n          type: \"post\",\n          data: {\n            _token: form.querySelector('[name=\"_token\"]').value,\n            state: form.querySelector('[name=\"state\"]').value,\n            id: form.querySelector('[name=\"id\"]').value,\n            column: 'email'\n          }\n        }\n      },\n      nik: {\n        maxlength: 15,\n        required: true,\n        remote: {\n          url: HOST_URL + '/ajax/user/validate',\n          type: \"post\",\n          data: {\n            _token: form.querySelector('[name=\"_token\"]').value,\n            state: form.querySelector('[name=\"state\"]').value,\n            id: form.querySelector('[name=\"id\"]').value,\n            column: 'nik'\n          }\n        }\n      },\n      telpon: {\n        required: true,\n        maxlength: 100\n      },\n      aktif: \"required\",\n      uportal: \"required\",\n      username: {\n        required: function required() {\n          return true;\n        },\n        maxlength: 100,\n        remote: {\n          url: HOST_URL + '/ajax/user/validate',\n          type: \"post\",\n          data: {\n            _token: form.querySelector('[name=\"_token\"]').value,\n            state: form.querySelector('[name=\"state\"]').value,\n            id: form.querySelector('[name=\"id\"]').value,\n            column: 'username'\n          }\n        }\n      },\n      password: {\n        required: function required() {\n          if (form.querySelector('[name=\"state\"]').value == 'add') {\n            return true;\n          }\n\n          return false;\n        },\n        minlength: 8\n      },\n      password_confirm: {\n        required: function required() {\n          if (form.querySelector('[name=\"state\"]').value == 'add') {\n            return true;\n          }\n\n          return false;\n        },\n        minlength: 8,\n        equalTo: \"#password\"\n      },\n      image_profile: {\n        accept: \"image/jpg,image/jpeg,image/png\",\n        dimension: [250, 250],\n        filesize: 60\n      }\n    },\n    highlight: function highlight(element) {\n      $(element).closest('.form-control').addClass('is-invalid');\n    },\n    unhighlight: function unhighlight(element) {\n      $(element).closest(\".form-control\").removeClass(\"is-invalid\");\n    },\n    errorPlacement: function errorPlacement(error, element) {\n      error.addClass('fv-plugins-message-container');\n\n      if (element.hasClass('select2') && element.next('.select2-container').length) {\n        $(element).closest('.form-group').addClass('is-invalid');\n        error.insertAfter(element.next('.select2-container'));\n      } else if (element.parent('.input-group').length) {\n        error.insertAfter(element.parent());\n      } else if (element.hasClass('select2')) {\n        error.insertAfter(element.next('span'));\n      } else if (element.attr(\"type\") == \"radio\") {\n        error.insertAfter(element.closest('div.radio-inline'));\n      } else if (element.attr(\"type\") == \"checkbox\") {\n        error.insertAfter(element.closest('div.checkbox-inline'));\n      } else if (element.attr(\"name\") == \"content\") {\n        error.insertAfter(\"div#cke_content\");\n      } else {\n        error.insertAfter(element);\n      }\n    },\n    errorElement: \"div\",\n    errorClass: 'fv-help-block',\n    messages: {\n      nama: {\n        required: 'Name is required'\n      },\n      email: {\n        required: 'Title is required.',\n        remote: 'The email you entered is already registered.'\n      },\n      nik: {\n        remote: 'The nik you entered is already registered.'\n      },\n      telpon: {\n        required: 'Phone is required.'\n      },\n      username: {\n        required: 'Username is required.',\n        remote: 'The username you entered is already registered.'\n      }\n    },\n    wrapper: 'div'\n  });\n});\n\nwindow.addRules = function (rulesObj) {\n  rulesObj.forEach(function (value, i) {\n    for (var item in value) {\n      $('#' + item + i).rules('add', value[item]);\n    }\n  });\n};\n\nwindow.removeRules = function (rulesObj) {\n  rulesObj.forEach(function (value, i) {\n    for (var item in value) {\n      $('#' + item + i).rules('remove');\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pages/profile_form.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/pages/profile_form.js"]();
/******/ 	
/******/ })()
;
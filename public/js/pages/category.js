/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pages/category.js":
/*!****************************************!*\
  !*** ./resources/js/pages/category.js ***!
  \****************************************/
/***/ (() => {

eval("\n\nvar datatable;\n\nvar KTDatatableJson = function () {\n  var grid = function grid() {\n    datatable = $('#kt_datatable').DataTable({\n      responsive: true,\n      paging: true,\n      dom: \"<'row'<'col-sm-12'tr>>\\n\\t\\t\\t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7 dataTables_pager'lp>>\",\n      lengthMenu: [10, 25, 50, 100],\n      pageLength: 10,\n      processing: true,\n      serverSide: true,\n      ajax: {\n        url: HOST_URL + '/datatables/category',\n        type: 'POST'\n      },\n      order: [[3, 'asc']],\n      columns: [{\n        data: 'category_id'\n      }, {\n        data: 'category_name'\n      }, {\n        data: 'category_link'\n      }, {\n        data: 'menu_order'\n      }, {\n        data: 'headline_view'\n      }, {\n        data: 'breaking_view'\n      }, {\n        data: 'is_show'\n      }, {\n        data: 'status'\n      }, {\n        data: 'category_id'\n      }],\n      columnDefs: [{\n        data: null,\n        searchable: false,\n        orderable: false,\n        targets: [0],\n        width: \"5%\",\n        className: 'details-control',\n        render: function render(data, type, row, meta) {\n          return '';\n        }\n      }, {\n        targets: 6,\n        render: function render(data) {\n          var display = {\n            1: {\n              'title': 'Ya',\n              'class': 'label-light-success'\n            },\n            0: {\n              'title': 'Tidak',\n              'class': 'label-light-info'\n            }\n          };\n\n          if (typeof display[data] === 'undefined') {\n            return data;\n          }\n\n          return '<span class=\"label label-lg font-weight-bold ' + display[data][\"class\"] + ' label-inline\">' + display[data].title + '</span>';\n        }\n      }, {\n        targets: 7,\n        render: function render(data, type, full, meta) {\n          var status = {\n            1: {\n              'title': 'Aktif',\n              'class': 'label-light-success'\n            },\n            0: {\n              'title': 'Tidak Aktif',\n              'class': 'label-light-info'\n            }\n          };\n\n          if (typeof status[data] === 'undefined') {\n            return data;\n          }\n\n          return '<span class=\"label label-lg font-weight-bold ' + status[data][\"class\"] + ' label-inline\">' + status[data].title + '</span>';\n        }\n      }, {\n        searchable: false,\n        orderable: false,\n        targets: 8,\n        render: function render(data, type, row, meta) {\n          return ' <div class=\"btn-group\" role=\"group\">' + '<a href=\"' + baseURL + 'category/' + data + '/show\" class=\"btn btn-outline-secondary btn-icon\" title=\"View\">' + '<i class=\"flaticon-eye text-success\"></i>' + '</a>' + '<a href=\"' + baseURL + 'category/' + data + '/edit\" class=\"btn btn-outline-secondary btn-icon\" title=\"Edit\">' + '<i class=\"flaticon-edit text-primary\"></i>' + '</a>' + '<a onclick=\"destroy(' + data + ', ' + row.category_id + ')\" class=\"btn btn-outline-secondary btn-icon\" title=\"Delete\">' + '<i class=\"flaticon2-trash text-danger\"></i>' + '</a>' + '</div>';\n        },\n        width: \"10%\"\n      }]\n    });\n    $('#kt_datatable tbody').on('click', 'tr td.details-control', function (e) {\n      $('#kt_datatable tbody tr').removeClass('shown');\n      $('#kt_datatable tbody tr .selected-1').hide();\n      var tr = $(this).closest('tr');\n      var data = datatable.row(tr).data();\n      var row = datatable.row(tr);\n\n      if (row.child.isShown()) {\n        row.child.hide();\n        tr.removeClass('shown');\n      } else {\n        if ($(this).hasClass('bg-childtd')) {\n          return false;\n        }\n\n        row.child(format(data['category_id']), 'selected-1').show();\n        tr.addClass('shown');\n        child_datatable(data['children'], data['category_id']);\n        console.log(data['children']);\n      }\n    });\n\n    var filter = function filter() {\n      var val = $.fn.dataTable.util.escapeRegex($(this).val());\n      datatable.column($(this).data('col-index')).search(val ? val : '', false, false).draw();\n    };\n\n    $('#kt_search').on('click', function (e) {\n      e.preventDefault();\n      var params = {};\n      $('.datatable-input').each(function () {\n        var i = $(this).data('col-index');\n\n        if (params[i]) {\n          params[i] += '|' + $(this).val();\n        } else {\n          params[i] = $(this).val();\n        }\n      });\n      $.each(params, function (i, val) {\n        // apply search params to datatable\n        datatable.column(i).search(val ? val : '', false, false);\n      });\n      datatable.table().draw();\n    });\n    $('#kt_reset').on('click', function (e) {\n      e.preventDefault();\n      $('.datatable-input').each(function () {\n        $(this).val('');\n        datatable.column($(this).data('col-index')).search('', false, false);\n      });\n      datatable.table().draw();\n    });\n  };\n\n  return {\n    init: function init() {\n      grid();\n    }\n  };\n}();\n\njQuery(document).ready(function () {\n  KTDatatableJson.init();\n});\n\nwindow.destroy = function (id) {\n  var msg = 'Do you want to to delete this data now ? <br/> You won\\'t be able to revert this!';\n  Swal.fire({\n    title: 'Are you sure?',\n    html: msg,\n    icon: 'warning',\n    width: '550px',\n    buttonsStyling: false,\n    confirmButtonText: \"<i class='flaticon2-check-mark'></i>Yes, delete it!\",\n    showCancelButton: true,\n    cancelButtonText: \"<i class='flaticon2-cross'></i> No, thanks\",\n    customClass: {\n      confirmButton: \"btn btn-primary\",\n      cancelButton: \"btn btn-secondary\"\n    },\n    reverseButtons: true\n  }).then(function (result) {\n    if (result.value) {\n      $.ajax({\n        type: \"POST\",\n        dataType: 'html',\n        url: HOST_URL + \"/category/\" + id,\n        cache: false,\n        data: {\n          _method: 'DELETE',\n          id: id\n        },\n        success: function success(data) {\n          Swal.fire(\"Success!\", \"Data deleted successfully.\", \"success\");\n          datatable.table().draw();\n        },\n        error: function error(xhr, ajaxOptions, thrownError) {\n          Swal.fire(\"Failed!\", \"Data failed to delete.\", \"error\");\n        }\n      }); //event.preventDefault();\n    }\n  });\n  return false;\n};\n\nfunction child_datatable(child, tableid) {\n  var subtable = $('#child' + tableid).DataTable({\n    aaData: child,\n    language: {\n      lengthMenu: \"_MENU_\",\n      zeroRecords: \"<p class='text-center'>No data available </p>\",\n      oPaginate: {\n        sNext: '<i class=\"flaticon2-next\"></i>',\n        sPrevious: '<i class=\"flaticon2-back\"></i>',\n        sFirst: '<i class=\"flaticon2-fast-back\"></i>',\n        sLast: '<i class=\"flaticon2-fast-next\"></i>'\n      }\n    },\n    aoColumns: [{\n      \"mData\": \"category_id\"\n    }, {\n      \"data\": null,\n      \"sortable\": false,\n      render: function render(data, type, row, meta) {\n        return meta.row + meta.settings._iDisplayStart + 1;\n      }\n    }, {\n      \"mData\": \"category_name\"\n    }, {\n      \"mData\": \"category_link\"\n    }, {\n      \"mData\": \"category_id\"\n    }],\n    order: [[0, \"asc\"]],\n    lengthMenu: [[10, 20, 50, 100], [10, 20, 50, 100]],\n    columnDefs: [{\n      visible: false,\n      targets: [0]\n    }, {\n      width: \"5%\",\n      targets: [1]\n    }, {\n      width: \"40%\",\n      targets: [2, 3]\n    }, {\n      searchable: false,\n      orderable: false,\n      targets: 4,\n      render: function render(data, type, row, meta) {\n        return ' <div class=\"btn-group\" role=\"group\">' + '<a href=\"' + baseURL + 'category/' + data + '\" class=\"btn btn-outline-secondary btn-icon\" title=\"View\">' + '<i class=\"flaticon-eye text-success\"></i>' + '</a>' + '<a href=\"' + baseURL + 'category/' + data + '/edit\" class=\"btn btn-outline-secondary btn-icon\" title=\"Edit\">' + '<i class=\"flaticon-edit text-primary\"></i>' + '</a>' + '<a onclick=\"destroy(' + data + ')\" class=\"btn btn-outline-secondary btn-icon\" title=\"Delete\">' + '<i class=\"flaticon2-trash text-danger\"></i>' + '</a>' + '</div>';\n      },\n      width: \"20%\"\n    }]\n  });\n  subtable.on('order.dt search.dt', function () {\n    subtable.column(1, {\n      search: 'applied',\n      order: 'applied'\n    }).nodes().each(function (cell, i) {\n      cell.innerHTML = i + 1;\n    });\n  }).draw();\n}\n\nfunction format(tableid) {\n  var html = '<div class=\"table-responsive\">' + '<table id=\"child' + tableid + '\" style=\"border: #eee solid 1px\" class=\"table childtable\" style=\"cursor:pointer\">' + '<thead>' + '<th>Sort</th>' + '<th>Category</th>' + '<th>Link SEO</th>' + '<th>Order</th>' + '<th>Action</th>' + '</thead>' + '<tbody></tbody>' + '</table>' + '</div>';\n  return html;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pages/category.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/pages/category.js"]();
/******/ 	
/******/ })()
;